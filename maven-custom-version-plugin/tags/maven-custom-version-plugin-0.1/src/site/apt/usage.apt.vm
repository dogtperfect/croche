  ------
  Usage
  ------
  croche
  ------
  18th April 2011
  ------

Usage

* Configuring the plugin

  To start using the plugin you will need to configure the repository location
  for the plugin.

+---+
<project>
  ...
  <pluginRepositories>
    <pluginRepository>
      <id>croche-releases</id>
      <url>http://croche.googlecode.com/svn/repository/releases</url>
    </pluginRepository>
  </pluginRepositories>
  ...
</project>
+---+ 

* Custom Version Configuration

  To configure the development and/or release versions used you can use the following settings within the <<versionConfig>> element:
  
  * <<devVersionRegex>> This is required if you want a custom development version to be used. This is the regular expression that identifies
  the groups in the current version of the artifact, for example \<devVersionRegex\>.*(\d+)[^0-9]+(\d+)[^0-9]+(\d+).*\</devVersionRegex\> would
  identify 3 groups for each number in a 3 number artifact version. If this is not set then the plugin will NOT set the developmentVersion system
  property meaning the maven release plugin will behave in the default manner.
  
  * <<devVersionGroup>> This is used to identify the number of the group (1 -n) in the dev version regex pattern that will get replaced, if this is not set
  then it defaults to the first group.
  
  * <<devVersionReplacement>> This is the replacement value to be used for the dev version group, if not set it defaults to the special value INCREMENT which
  means that the value of the number identified as the devVersionGroup will get incremented. It may be set to GROUP_TEXT which means it will be set to the current value of the group and hence not replaced.
  
  * <<releaseVersionRegex>> This is required if you want a custom release version to be used. This is the regular expression that identifies
  the groups in the current version of the artifact. If this is not set then the plugin will NOT set the releaseVersion system
  property meaning the maven release plugin will behave in the default manner.
  
  * <<releaseVersionGroup>> This is used to identify the number of the group (1 -n) in the release version regex pattern that will get replaced, if this is not set
  then it defaults to the first group.
  
  * <<releaseVersionReplacement>> This is the replacement string to use for the regex group identified by releaseVersionGroup, this is optional
  and if NOT specified it defaults to empty meaning it would get replaced with an empty string.
  It may be set to GROUP_TEXT which means it will be set to the current value of the group and hence not replaced.
  

* Incrementing the middle version number Example:  

+---+
<project>
  ...
 <build>
  <plugins>
   <plugin>
	<groupId>croche.maven</groupId>
	<artifactId>maven-custom-version-plugin</artifactId>
	<configuration>
	 <versionConfig>
	  <devVersionRegex>.*(\d+)[^0-9]+(\d+)[^0-9]+(\d+).*</devVersionRegex>
	  <devVersionGroup>2</devVersionGroup>
	 </versionConfig>
	</configuration>
   </plugin>
  </plugins>
 </build>
  ...
</project>
+---+ 

  The example configuration above will increment the middle number in a version string, for example if the current version
  number is 1.1.0-SNAPSHOT then by default the maven release plugin will increment the last digit so you would end up with
  1.1.1-SNAPSHOT as the next development version in the POM post release. If however you used the above maven custom version plugin
  and ran your release with the goals: custom-version:generate-versions release:prepare release:perform then you would end up with
  the middle digit being incremented so it would become 1.2.0-SNAPSHOT after release. The devVersionGroup has a value as 2 which
  chooses the 2nd group in the regex pattern as the number to increment. If the devVersionGroup was set to 1 then the next development
  version would in this example become 2.1.0-SNAPSHOT 
  
* Having a custom release version based on a profile property Example:

+---+
<project>
  ...
 <build>
  <plugins>
   <plugin>
	<groupId>croche.maven</groupId>
	<artifactId>maven-custom-version-plugin</artifactId>
	<configuration>
	 <versionConfig>
	  <devVersionRegex>.*(\d+)[^0-9]+(\d+)[^0-9]+(\d+).*</devVersionRegex>
	  <devVersionGroup>2</devVersionGroup>
	  <releaseVersionRegex>.*(-SNAPSHOT)</releaseVersionRegex>
	  <releaseVersionGroup>1</releaseVersionGroup>
	  <releaseVersionReplacement>-${profile.name}</releaseVersionReplacement>
	 </versionConfig>
	</configuration>
   </plugin>
  </plugins>
 </build>
  ...
</project>
+---+ 

  The example configuration above when releasing will change the version number for the release to have a profile name added to it,
  for example if the version prior to release was 1.1.0-SNAPSHOT and the release was ran for a profile which had the property profile.name set to "prod" then 
  the release version would become 1.1.0-prod, also as above the next development version in this case would become 1.2.0-SNAPSHOT.
  